// Code generated by protoc-gen-go.
// source: consensus-api.proto
// DO NOT EDIT!

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Payload struct {
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Proof   []byte `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *Payload) Reset()         { *m = Payload{} }
func (m *Payload) String() string { return proto.CompactTextString(m) }
func (*Payload) ProtoMessage()    {}

type Dummy struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *Dummy) Reset()         { *m = Dummy{} }
func (m *Dummy) String() string { return proto.CompactTextString(m) }
func (*Dummy) ProtoMessage()    {}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for ConsensusApi service

type ConsensusApiClient interface {
	ConsentData(ctx context.Context, in *Payload, opts ...grpc.CallOption) (*Dummy, error)
	GetConsensusStream(ctx context.Context, opts ...grpc.CallOption) (ConsensusApi_GetConsensusStreamClient, error)
}

type consensusApiClient struct {
	cc *grpc.ClientConn
}

func NewConsensusApiClient(cc *grpc.ClientConn) ConsensusApiClient {
	return &consensusApiClient{cc}
}

func (c *consensusApiClient) ConsentData(ctx context.Context, in *Payload, opts ...grpc.CallOption) (*Dummy, error) {
	out := new(Dummy)
	err := grpc.Invoke(ctx, "/protos.ConsensusApi/ConsentData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consensusApiClient) GetConsensusStream(ctx context.Context, opts ...grpc.CallOption) (ConsensusApi_GetConsensusStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ConsensusApi_serviceDesc.Streams[0], c.cc, "/protos.ConsensusApi/GetConsensusStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &consensusApiGetConsensusStreamClient{stream}
	return x, nil
}

type ConsensusApi_GetConsensusStreamClient interface {
	Send(*Payload) error
	Recv() (*Payload, error)
	grpc.ClientStream
}

type consensusApiGetConsensusStreamClient struct {
	grpc.ClientStream
}

func (x *consensusApiGetConsensusStreamClient) Send(m *Payload) error {
	return x.ClientStream.SendMsg(m)
}

func (x *consensusApiGetConsensusStreamClient) Recv() (*Payload, error) {
	m := new(Payload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ConsensusApi service

type ConsensusApiServer interface {
	ConsentData(context.Context, *Payload) (*Dummy, error)
	GetConsensusStream(ConsensusApi_GetConsensusStreamServer) error
}

func RegisterConsensusApiServer(s *grpc.Server, srv ConsensusApiServer) {
	s.RegisterService(&_ConsensusApi_serviceDesc, srv)
}

func _ConsensusApi_ConsentData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ConsensusApiServer).ConsentData(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ConsensusApi_GetConsensusStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConsensusApiServer).GetConsensusStream(&consensusApiGetConsensusStreamServer{stream})
}

type ConsensusApi_GetConsensusStreamServer interface {
	Send(*Payload) error
	Recv() (*Payload, error)
	grpc.ServerStream
}

type consensusApiGetConsensusStreamServer struct {
	grpc.ServerStream
}

func (x *consensusApiGetConsensusStreamServer) Send(m *Payload) error {
	return x.ServerStream.SendMsg(m)
}

func (x *consensusApiGetConsensusStreamServer) Recv() (*Payload, error) {
	m := new(Payload)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ConsensusApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.ConsensusApi",
	HandlerType: (*ConsensusApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConsentData",
			Handler:    _ConsensusApi_ConsentData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetConsensusStream",
			Handler:       _ConsensusApi_GetConsensusStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
}
